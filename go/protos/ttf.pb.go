// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.21.12
// source: ttf.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TensorData_DataType int32

const (
	TensorData_DT_FLOAT TensorData_DataType = 0
	TensorData_DT_HALF  TensorData_DataType = 1
	TensorData_DT_INT32 TensorData_DataType = 2
	TensorData_DT_INT64 TensorData_DataType = 3
	TensorData_DT_BOOL  TensorData_DataType = 4
)

// Enum value maps for TensorData_DataType.
var (
	TensorData_DataType_name = map[int32]string{
		0: "DT_FLOAT",
		1: "DT_HALF",
		2: "DT_INT32",
		3: "DT_INT64",
		4: "DT_BOOL",
	}
	TensorData_DataType_value = map[string]int32{
		"DT_FLOAT": 0,
		"DT_HALF":  1,
		"DT_INT32": 2,
		"DT_INT64": 3,
		"DT_BOOL":  4,
	}
)

func (x TensorData_DataType) Enum() *TensorData_DataType {
	p := new(TensorData_DataType)
	*p = x
	return p
}

func (x TensorData_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TensorData_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_ttf_proto_enumTypes[0].Descriptor()
}

func (TensorData_DataType) Type() protoreflect.EnumType {
	return &file_ttf_proto_enumTypes[0]
}

func (x TensorData_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TensorData_DataType.Descriptor instead.
func (TensorData_DataType) EnumDescriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{1, 0}
}

type TensorData_Compression_CompressionType int32

const (
	TensorData_Compression_NONE   TensorData_Compression_CompressionType = 0
	TensorData_Compression_FP16   TensorData_Compression_CompressionType = 1 // float32->float16
	TensorData_Compression_QUANT8 TensorData_Compression_CompressionType = 2 // 8-bit量化
	TensorData_Compression_ZSTD   TensorData_Compression_CompressionType = 3 // Zstandard压缩
)

// Enum value maps for TensorData_Compression_CompressionType.
var (
	TensorData_Compression_CompressionType_name = map[int32]string{
		0: "NONE",
		1: "FP16",
		2: "QUANT8",
		3: "ZSTD",
	}
	TensorData_Compression_CompressionType_value = map[string]int32{
		"NONE":   0,
		"FP16":   1,
		"QUANT8": 2,
		"ZSTD":   3,
	}
)

func (x TensorData_Compression_CompressionType) Enum() *TensorData_Compression_CompressionType {
	p := new(TensorData_Compression_CompressionType)
	*p = x
	return p
}

func (x TensorData_Compression_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TensorData_Compression_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ttf_proto_enumTypes[1].Descriptor()
}

func (TensorData_Compression_CompressionType) Type() protoreflect.EnumType {
	return &file_ttf_proto_enumTypes[1]
}

func (x TensorData_Compression_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TensorData_Compression_CompressionType.Descriptor instead.
func (TensorData_Compression_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{1, 0, 0}
}

type TransferAck_Status int32

const (
	TransferAck_SUCCESS TransferAck_Status = 0
	TransferAck_PARTIAL TransferAck_Status = 1 // 部分成功
	TransferAck_FAILED  TransferAck_Status = 2
	TransferAck_RETRY   TransferAck_Status = 3 // 建议重试
)

// Enum value maps for TransferAck_Status.
var (
	TransferAck_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "PARTIAL",
		2: "FAILED",
		3: "RETRY",
	}
	TransferAck_Status_value = map[string]int32{
		"SUCCESS": 0,
		"PARTIAL": 1,
		"FAILED":  2,
		"RETRY":   3,
	}
)

func (x TransferAck_Status) Enum() *TransferAck_Status {
	p := new(TransferAck_Status)
	*p = x
	return p
}

func (x TransferAck_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferAck_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_ttf_proto_enumTypes[2].Descriptor()
}

func (TransferAck_Status) Type() protoreflect.EnumType {
	return &file_ttf_proto_enumTypes[2]
}

func (x TransferAck_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferAck_Status.Descriptor instead.
func (TransferAck_Status) EnumDescriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{2, 0}
}

// 张量批次传输协议
type TensorBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransmissionId string        `protobuf:"bytes,1,opt,name=transmission_id,json=transmissionId,proto3" json:"transmission_id,omitempty"` // 唯一传输ID
	ModelName      string        `protobuf:"bytes,2,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                // 模型标识
	SourceLayer    int32         `protobuf:"varint,3,opt,name=source_layer,json=sourceLayer,proto3" json:"source_layer,omitempty"`         // 源层索引
	TargetLayer    int32         `protobuf:"varint,4,opt,name=target_layer,json=targetLayer,proto3" json:"target_layer,omitempty"`         // 目标层索引
	Tensors        []*TensorData `protobuf:"bytes,5,rep,name=tensors,proto3" json:"tensors,omitempty"`                                     // 张量数据数组
	Priority       int32         `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`                                  // 传输优先级
	RequiresGrad   bool          `protobuf:"varint,7,opt,name=requires_grad,json=requiresGrad,proto3" json:"requires_grad,omitempty"`      // 是否需要梯度
}

func (x *TensorBatch) Reset() {
	*x = TensorBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorBatch) ProtoMessage() {}

func (x *TensorBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorBatch.ProtoReflect.Descriptor instead.
func (*TensorBatch) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{0}
}

func (x *TensorBatch) GetTransmissionId() string {
	if x != nil {
		return x.TransmissionId
	}
	return ""
}

func (x *TensorBatch) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TensorBatch) GetSourceLayer() int32 {
	if x != nil {
		return x.SourceLayer
	}
	return 0
}

func (x *TensorBatch) GetTargetLayer() int32 {
	if x != nil {
		return x.TargetLayer
	}
	return 0
}

func (x *TensorBatch) GetTensors() []*TensorData {
	if x != nil {
		return x.Tensors
	}
	return nil
}

func (x *TensorBatch) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TensorBatch) GetRequiresGrad() bool {
	if x != nil {
		return x.RequiresGrad
	}
	return false
}

// 单个张量数据
type TensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                        // 张量名称
	Shape       []int64                 `protobuf:"varint,2,rep,packed,name=shape,proto3" json:"shape,omitempty"`                              // 形状数组
	Dtype       TensorData_DataType     `protobuf:"varint,3,opt,name=dtype,proto3,enum=taskcenter.TensorData_DataType" json:"dtype,omitempty"` // 数据类型
	Data        []byte                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                        // 原始字节数据
	Compression *TensorData_Compression `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`                          // 压缩信息
}

func (x *TensorData) Reset() {
	*x = TensorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorData) ProtoMessage() {}

func (x *TensorData) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorData.ProtoReflect.Descriptor instead.
func (*TensorData) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{1}
}

func (x *TensorData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TensorData) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *TensorData) GetDtype() TensorData_DataType {
	if x != nil {
		return x.Dtype
	}
	return TensorData_DT_FLOAT
}

func (x *TensorData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TensorData) GetCompression() *TensorData_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

// 传输确认响应
type TransferAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransmissionId   string                    `protobuf:"bytes,1,opt,name=transmission_id,json=transmissionId,proto3" json:"transmission_id,omitempty"`        // 对应的传输ID
	Status           TransferAck_Status        `protobuf:"varint,2,opt,name=status,proto3,enum=taskcenter.TransferAck_Status" json:"status,omitempty"`          // 处理状态
	ReceiveTimestamp int64                     `protobuf:"varint,3,opt,name=receive_timestamp,json=receiveTimestamp,proto3" json:"receive_timestamp,omitempty"` // 接收时间戳(ns)
	TargetDevice     string                    `protobuf:"bytes,4,opt,name=target_device,json=targetDevice,proto3" json:"target_device,omitempty"`              // 目标设备标识
	Received         []*TransferAck_TensorMeta `protobuf:"bytes,5,rep,name=received,proto3" json:"received,omitempty"`                                          // 成功接收的张量元数据
}

func (x *TransferAck) Reset() {
	*x = TransferAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferAck) ProtoMessage() {}

func (x *TransferAck) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferAck.ProtoReflect.Descriptor instead.
func (*TransferAck) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{2}
}

func (x *TransferAck) GetTransmissionId() string {
	if x != nil {
		return x.TransmissionId
	}
	return ""
}

func (x *TransferAck) GetStatus() TransferAck_Status {
	if x != nil {
		return x.Status
	}
	return TransferAck_SUCCESS
}

func (x *TransferAck) GetReceiveTimestamp() int64 {
	if x != nil {
		return x.ReceiveTimestamp
	}
	return 0
}

func (x *TransferAck) GetTargetDevice() string {
	if x != nil {
		return x.TargetDevice
	}
	return ""
}

func (x *TransferAck) GetReceived() []*TransferAck_TensorMeta {
	if x != nil {
		return x.Received
	}
	return nil
}

// 分块传输协议
type TensorChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransmissionId string `protobuf:"bytes,1,opt,name=transmission_id,json=transmissionId,proto3" json:"transmission_id,omitempty"`
	ChunkIndex     int32  `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	IsLast         bool   `protobuf:"varint,3,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	// Types that are assignable to Payload:
	//	*TensorChunk_RawData
	//	*TensorChunk_Meta
	Payload isTensorChunk_Payload `protobuf_oneof:"payload"`
}

func (x *TensorChunk) Reset() {
	*x = TensorChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorChunk) ProtoMessage() {}

func (x *TensorChunk) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorChunk.ProtoReflect.Descriptor instead.
func (*TensorChunk) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{3}
}

func (x *TensorChunk) GetTransmissionId() string {
	if x != nil {
		return x.TransmissionId
	}
	return ""
}

func (x *TensorChunk) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *TensorChunk) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (m *TensorChunk) GetPayload() isTensorChunk_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TensorChunk) GetRawData() []byte {
	if x, ok := x.GetPayload().(*TensorChunk_RawData); ok {
		return x.RawData
	}
	return nil
}

func (x *TensorChunk) GetMeta() *TensorChunk_TensorMeta {
	if x, ok := x.GetPayload().(*TensorChunk_Meta); ok {
		return x.Meta
	}
	return nil
}

type isTensorChunk_Payload interface {
	isTensorChunk_Payload()
}

type TensorChunk_RawData struct {
	RawData []byte `protobuf:"bytes,4,opt,name=raw_data,json=rawData,proto3,oneof"` // 原始数据块
}

type TensorChunk_Meta struct {
	Meta *TensorChunk_TensorMeta `protobuf:"bytes,5,opt,name=meta,proto3,oneof"` // 首块包含元数据
}

func (*TensorChunk_RawData) isTensorChunk_Payload() {}

func (*TensorChunk_Meta) isTensorChunk_Payload() {}

type TensorData_Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         TensorData_Compression_CompressionType `protobuf:"varint,1,opt,name=type,proto3,enum=taskcenter.TensorData_Compression_CompressionType" json:"type,omitempty"`
	Ratio        float32                                `protobuf:"fixed32,2,opt,name=ratio,proto3" json:"ratio,omitempty"`                                  // 压缩率
	OriginalSize int32                                  `protobuf:"varint,3,opt,name=original_size,json=originalSize,proto3" json:"original_size,omitempty"` // 原始字节数
}

func (x *TensorData_Compression) Reset() {
	*x = TensorData_Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorData_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorData_Compression) ProtoMessage() {}

func (x *TensorData_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorData_Compression.ProtoReflect.Descriptor instead.
func (*TensorData_Compression) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TensorData_Compression) GetType() TensorData_Compression_CompressionType {
	if x != nil {
		return x.Type
	}
	return TensorData_Compression_NONE
}

func (x *TensorData_Compression) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

func (x *TensorData_Compression) GetOriginalSize() int32 {
	if x != nil {
		return x.OriginalSize
	}
	return 0
}

type TransferAck_TensorMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BytesReceived int32  `protobuf:"varint,2,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	ChecksumValid bool   `protobuf:"varint,3,opt,name=checksum_valid,json=checksumValid,proto3" json:"checksum_valid,omitempty"`
}

func (x *TransferAck_TensorMeta) Reset() {
	*x = TransferAck_TensorMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferAck_TensorMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferAck_TensorMeta) ProtoMessage() {}

func (x *TransferAck_TensorMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferAck_TensorMeta.ProtoReflect.Descriptor instead.
func (*TransferAck_TensorMeta) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TransferAck_TensorMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransferAck_TensorMeta) GetBytesReceived() int32 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *TransferAck_TensorMeta) GetChecksumValid() bool {
	if x != nil {
		return x.ChecksumValid
	}
	return false
}

type TensorChunk_TensorMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchHeader *TensorBatch `protobuf:"bytes,1,opt,name=batch_header,json=batchHeader,proto3" json:"batch_header,omitempty"`
	TotalChunks int32        `protobuf:"varint,2,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	ChunkSize   int32        `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
}

func (x *TensorChunk_TensorMeta) Reset() {
	*x = TensorChunk_TensorMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ttf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorChunk_TensorMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorChunk_TensorMeta) ProtoMessage() {}

func (x *TensorChunk_TensorMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ttf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorChunk_TensorMeta.ProtoReflect.Descriptor instead.
func (*TensorChunk_TensorMeta) Descriptor() ([]byte, []int) {
	return file_ttf_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TensorChunk_TensorMeta) GetBatchHeader() *TensorBatch {
	if x != nil {
		return x.BatchHeader
	}
	return nil
}

func (x *TensorChunk_TensorMeta) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *TensorChunk_TensorMeta) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

var File_ttf_proto protoreflect.FileDescriptor

var file_ttf_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x74, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x67, 0x72, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x61, 0x64, 0x22, 0xe7, 0x03, 0x0a, 0x0a, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0xcd, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x50, 0x31, 0x36, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x38, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44,
	0x10, 0x03, 0x22, 0x4e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x54, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x04, 0x22, 0xab, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x6b,
	0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x1a, 0x6e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x03,
	0x22, 0xdf, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x8a, 0x01, 0x0a, 0x0a, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x32, 0xe4, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x53,
	0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x1a, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x28, 0x01, 0x12, 0x4b, 0x0a, 0x13,
	0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x17, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x63, 0x6b, 0x28, 0x01, 0x30, 0x01, 0x42, 0x4d, 0x0a, 0x14, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x61, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x42, 0x1d, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x14, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x61, 0x69, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ttf_proto_rawDescOnce sync.Once
	file_ttf_proto_rawDescData = file_ttf_proto_rawDesc
)

func file_ttf_proto_rawDescGZIP() []byte {
	file_ttf_proto_rawDescOnce.Do(func() {
		file_ttf_proto_rawDescData = protoimpl.X.CompressGZIP(file_ttf_proto_rawDescData)
	})
	return file_ttf_proto_rawDescData
}

var file_ttf_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ttf_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ttf_proto_goTypes = []interface{}{
	(TensorData_DataType)(0),                    // 0: taskcenter.TensorData.DataType
	(TensorData_Compression_CompressionType)(0), // 1: taskcenter.TensorData.Compression.CompressionType
	(TransferAck_Status)(0),                     // 2: taskcenter.TransferAck.Status
	(*TensorBatch)(nil),                         // 3: taskcenter.TensorBatch
	(*TensorData)(nil),                          // 4: taskcenter.TensorData
	(*TransferAck)(nil),                         // 5: taskcenter.TransferAck
	(*TensorChunk)(nil),                         // 6: taskcenter.TensorChunk
	(*TensorData_Compression)(nil),              // 7: taskcenter.TensorData.Compression
	(*TransferAck_TensorMeta)(nil),              // 8: taskcenter.TransferAck.TensorMeta
	(*TensorChunk_TensorMeta)(nil),              // 9: taskcenter.TensorChunk.TensorMeta
}
var file_ttf_proto_depIdxs = []int32{
	4,  // 0: taskcenter.TensorBatch.tensors:type_name -> taskcenter.TensorData
	0,  // 1: taskcenter.TensorData.dtype:type_name -> taskcenter.TensorData.DataType
	7,  // 2: taskcenter.TensorData.compression:type_name -> taskcenter.TensorData.Compression
	2,  // 3: taskcenter.TransferAck.status:type_name -> taskcenter.TransferAck.Status
	8,  // 4: taskcenter.TransferAck.received:type_name -> taskcenter.TransferAck.TensorMeta
	9,  // 5: taskcenter.TensorChunk.meta:type_name -> taskcenter.TensorChunk.TensorMeta
	1,  // 6: taskcenter.TensorData.Compression.type:type_name -> taskcenter.TensorData.Compression.CompressionType
	3,  // 7: taskcenter.TensorChunk.TensorMeta.batch_header:type_name -> taskcenter.TensorBatch
	3,  // 8: taskcenter.ModelTransferService.SendBatch:input_type -> taskcenter.TensorBatch
	6,  // 9: taskcenter.ModelTransferService.StreamSend:input_type -> taskcenter.TensorChunk
	6,  // 10: taskcenter.ModelTransferService.BidirectionalStream:input_type -> taskcenter.TensorChunk
	5,  // 11: taskcenter.ModelTransferService.SendBatch:output_type -> taskcenter.TransferAck
	5,  // 12: taskcenter.ModelTransferService.StreamSend:output_type -> taskcenter.TransferAck
	5,  // 13: taskcenter.ModelTransferService.BidirectionalStream:output_type -> taskcenter.TransferAck
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ttf_proto_init() }
func file_ttf_proto_init() {
	if File_ttf_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ttf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ttf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ttf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ttf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ttf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorData_Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ttf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferAck_TensorMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ttf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorChunk_TensorMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ttf_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TensorChunk_RawData)(nil),
		(*TensorChunk_Meta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ttf_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ttf_proto_goTypes,
		DependencyIndexes: file_ttf_proto_depIdxs,
		EnumInfos:         file_ttf_proto_enumTypes,
		MessageInfos:      file_ttf_proto_msgTypes,
	}.Build()
	File_ttf_proto = out.File
	file_ttf_proto_rawDesc = nil
	file_ttf_proto_goTypes = nil
	file_ttf_proto_depIdxs = nil
}
