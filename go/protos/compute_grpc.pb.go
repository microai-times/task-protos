// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: compute.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComputeNode_PreloadModel_FullMethodName   = "/taskcenter.ComputeNode/PreloadModel"
	ComputeNode_GetLayerOutput_FullMethodName = "/taskcenter.ComputeNode/GetLayerOutput"
	ComputeNode_ExecuteTask_FullMethodName    = "/taskcenter.ComputeNode/ExecuteTask"
)

// ComputeNodeClient is the client API for ComputeNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 节点计算服务
type ComputeNodeClient interface {
	// 模型预加载接口
	PreloadModel(ctx context.Context, in *ModelSpec, opts ...grpc.CallOption) (*LoadResult, error)
	// 层数据获取接口（用于节点间数据传输）
	GetLayerOutput(ctx context.Context, in *LayerRequest, opts ...grpc.CallOption) (*TensorData, error)
	// 计算任务执行接口
	ExecuteTask(ctx context.Context, in *ComputeTask, opts ...grpc.CallOption) (*TaskResult, error)
}

type computeNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeNodeClient(cc grpc.ClientConnInterface) ComputeNodeClient {
	return &computeNodeClient{cc}
}

func (c *computeNodeClient) PreloadModel(ctx context.Context, in *ModelSpec, opts ...grpc.CallOption) (*LoadResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadResult)
	err := c.cc.Invoke(ctx, ComputeNode_PreloadModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeNodeClient) GetLayerOutput(ctx context.Context, in *LayerRequest, opts ...grpc.CallOption) (*TensorData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TensorData)
	err := c.cc.Invoke(ctx, ComputeNode_GetLayerOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeNodeClient) ExecuteTask(ctx context.Context, in *ComputeTask, opts ...grpc.CallOption) (*TaskResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResult)
	err := c.cc.Invoke(ctx, ComputeNode_ExecuteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeNodeServer is the server API for ComputeNode service.
// All implementations must embed UnimplementedComputeNodeServer
// for forward compatibility.
//
// 节点计算服务
type ComputeNodeServer interface {
	// 模型预加载接口
	PreloadModel(context.Context, *ModelSpec) (*LoadResult, error)
	// 层数据获取接口（用于节点间数据传输）
	GetLayerOutput(context.Context, *LayerRequest) (*TensorData, error)
	// 计算任务执行接口
	ExecuteTask(context.Context, *ComputeTask) (*TaskResult, error)
	mustEmbedUnimplementedComputeNodeServer()
}

// UnimplementedComputeNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComputeNodeServer struct{}

func (UnimplementedComputeNodeServer) PreloadModel(context.Context, *ModelSpec) (*LoadResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadModel not implemented")
}
func (UnimplementedComputeNodeServer) GetLayerOutput(context.Context, *LayerRequest) (*TensorData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayerOutput not implemented")
}
func (UnimplementedComputeNodeServer) ExecuteTask(context.Context, *ComputeTask) (*TaskResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedComputeNodeServer) mustEmbedUnimplementedComputeNodeServer() {}
func (UnimplementedComputeNodeServer) testEmbeddedByValue()                     {}

// UnsafeComputeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeNodeServer will
// result in compilation errors.
type UnsafeComputeNodeServer interface {
	mustEmbedUnimplementedComputeNodeServer()
}

func RegisterComputeNodeServer(s grpc.ServiceRegistrar, srv ComputeNodeServer) {
	// If the following call pancis, it indicates UnimplementedComputeNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComputeNode_ServiceDesc, srv)
}

func _ComputeNode_PreloadModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeNodeServer).PreloadModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeNode_PreloadModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeNodeServer).PreloadModel(ctx, req.(*ModelSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeNode_GetLayerOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeNodeServer).GetLayerOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeNode_GetLayerOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeNodeServer).GetLayerOutput(ctx, req.(*LayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeNode_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeNodeServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeNode_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeNodeServer).ExecuteTask(ctx, req.(*ComputeTask))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputeNode_ServiceDesc is the grpc.ServiceDesc for ComputeNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskcenter.ComputeNode",
	HandlerType: (*ComputeNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreloadModel",
			Handler:    _ComputeNode_PreloadModel_Handler,
		},
		{
			MethodName: "GetLayerOutput",
			Handler:    _ComputeNode_GetLayerOutput_Handler,
		},
		{
			MethodName: "ExecuteTask",
			Handler:    _ComputeNode_ExecuteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compute.proto",
}
