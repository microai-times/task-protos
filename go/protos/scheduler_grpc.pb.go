// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: scheduler.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskScheduler_ReportStatus_FullMethodName = "/taskcenter.TaskScheduler/ReportStatus"
	TaskScheduler_AssignTask_FullMethodName   = "/taskcenter.TaskScheduler/AssignTask"
)

// TaskSchedulerClient is the client API for TaskScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 任务中心服务
type TaskSchedulerClient interface {
	// 节点注册/心跳接口
	ReportStatus(ctx context.Context, in *NodeStatus, opts ...grpc.CallOption) (*StatusAck, error)
	// 任务分配接口
	AssignTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskAssignment, error)
}

type taskSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskSchedulerClient(cc grpc.ClientConnInterface) TaskSchedulerClient {
	return &taskSchedulerClient{cc}
}

func (c *taskSchedulerClient) ReportStatus(ctx context.Context, in *NodeStatus, opts ...grpc.CallOption) (*StatusAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusAck)
	err := c.cc.Invoke(ctx, TaskScheduler_ReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskSchedulerClient) AssignTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAssignment)
	err := c.cc.Invoke(ctx, TaskScheduler_AssignTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskSchedulerServer is the server API for TaskScheduler service.
// All implementations must embed UnimplementedTaskSchedulerServer
// for forward compatibility.
//
// 任务中心服务
type TaskSchedulerServer interface {
	// 节点注册/心跳接口
	ReportStatus(context.Context, *NodeStatus) (*StatusAck, error)
	// 任务分配接口
	AssignTask(context.Context, *TaskRequest) (*TaskAssignment, error)
	mustEmbedUnimplementedTaskSchedulerServer()
}

// UnimplementedTaskSchedulerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskSchedulerServer struct{}

func (UnimplementedTaskSchedulerServer) ReportStatus(context.Context, *NodeStatus) (*StatusAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatus not implemented")
}
func (UnimplementedTaskSchedulerServer) AssignTask(context.Context, *TaskRequest) (*TaskAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTask not implemented")
}
func (UnimplementedTaskSchedulerServer) mustEmbedUnimplementedTaskSchedulerServer() {}
func (UnimplementedTaskSchedulerServer) testEmbeddedByValue()                       {}

// UnsafeTaskSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskSchedulerServer will
// result in compilation errors.
type UnsafeTaskSchedulerServer interface {
	mustEmbedUnimplementedTaskSchedulerServer()
}

func RegisterTaskSchedulerServer(s grpc.ServiceRegistrar, srv TaskSchedulerServer) {
	// If the following call pancis, it indicates UnimplementedTaskSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskScheduler_ServiceDesc, srv)
}

func _TaskScheduler_ReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).ReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_ReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).ReportStatus(ctx, req.(*NodeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskScheduler_AssignTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskSchedulerServer).AssignTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskScheduler_AssignTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskSchedulerServer).AssignTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskScheduler_ServiceDesc is the grpc.ServiceDesc for TaskScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskcenter.TaskScheduler",
	HandlerType: (*TaskSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportStatus",
			Handler:    _TaskScheduler_ReportStatus_Handler,
		},
		{
			MethodName: "AssignTask",
			Handler:    _TaskScheduler_AssignTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}
