// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: model_transfer_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelTransferService_SendBatch_FullMethodName           = "/taskcenter.ModelTransferService/SendBatch"
	ModelTransferService_StreamSend_FullMethodName          = "/taskcenter.ModelTransferService/StreamSend"
	ModelTransferService_BidirectionalStream_FullMethodName = "/taskcenter.ModelTransferService/BidirectionalStream"
)

// ModelTransferServiceClient is the client API for ModelTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC服务定义
type ModelTransferServiceClient interface {
	// 单向批量传输
	SendBatch(ctx context.Context, in *TensorBatch, opts ...grpc.CallOption) (*TransferAck, error)
	// 流式传输 (适合大张量)
	StreamSend(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TensorChunk, TransferAck], error)
	// 双向流式 (带背压控制)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TensorChunk, TransferAck], error)
}

type modelTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelTransferServiceClient(cc grpc.ClientConnInterface) ModelTransferServiceClient {
	return &modelTransferServiceClient{cc}
}

func (c *modelTransferServiceClient) SendBatch(ctx context.Context, in *TensorBatch, opts ...grpc.CallOption) (*TransferAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferAck)
	err := c.cc.Invoke(ctx, ModelTransferService_SendBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelTransferServiceClient) StreamSend(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TensorChunk, TransferAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModelTransferService_ServiceDesc.Streams[0], ModelTransferService_StreamSend_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TensorChunk, TransferAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelTransferService_StreamSendClient = grpc.ClientStreamingClient[TensorChunk, TransferAck]

func (c *modelTransferServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TensorChunk, TransferAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModelTransferService_ServiceDesc.Streams[1], ModelTransferService_BidirectionalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TensorChunk, TransferAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelTransferService_BidirectionalStreamClient = grpc.BidiStreamingClient[TensorChunk, TransferAck]

// ModelTransferServiceServer is the server API for ModelTransferService service.
// All implementations must embed UnimplementedModelTransferServiceServer
// for forward compatibility.
//
// gRPC服务定义
type ModelTransferServiceServer interface {
	// 单向批量传输
	SendBatch(context.Context, *TensorBatch) (*TransferAck, error)
	// 流式传输 (适合大张量)
	StreamSend(grpc.ClientStreamingServer[TensorChunk, TransferAck]) error
	// 双向流式 (带背压控制)
	BidirectionalStream(grpc.BidiStreamingServer[TensorChunk, TransferAck]) error
	mustEmbedUnimplementedModelTransferServiceServer()
}

// UnimplementedModelTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelTransferServiceServer struct{}

func (UnimplementedModelTransferServiceServer) SendBatch(context.Context, *TensorBatch) (*TransferAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatch not implemented")
}
func (UnimplementedModelTransferServiceServer) StreamSend(grpc.ClientStreamingServer[TensorChunk, TransferAck]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSend not implemented")
}
func (UnimplementedModelTransferServiceServer) BidirectionalStream(grpc.BidiStreamingServer[TensorChunk, TransferAck]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedModelTransferServiceServer) mustEmbedUnimplementedModelTransferServiceServer() {}
func (UnimplementedModelTransferServiceServer) testEmbeddedByValue()                              {}

// UnsafeModelTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelTransferServiceServer will
// result in compilation errors.
type UnsafeModelTransferServiceServer interface {
	mustEmbedUnimplementedModelTransferServiceServer()
}

func RegisterModelTransferServiceServer(s grpc.ServiceRegistrar, srv ModelTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelTransferService_ServiceDesc, srv)
}

func _ModelTransferService_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TensorBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelTransferServiceServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelTransferService_SendBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelTransferServiceServer).SendBatch(ctx, req.(*TensorBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelTransferService_StreamSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelTransferServiceServer).StreamSend(&grpc.GenericServerStream[TensorChunk, TransferAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelTransferService_StreamSendServer = grpc.ClientStreamingServer[TensorChunk, TransferAck]

func _ModelTransferService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelTransferServiceServer).BidirectionalStream(&grpc.GenericServerStream[TensorChunk, TransferAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelTransferService_BidirectionalStreamServer = grpc.BidiStreamingServer[TensorChunk, TransferAck]

// ModelTransferService_ServiceDesc is the grpc.ServiceDesc for ModelTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskcenter.ModelTransferService",
	HandlerType: (*ModelTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBatch",
			Handler:    _ModelTransferService_SendBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSend",
			Handler:       _ModelTransferService_StreamSend_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _ModelTransferService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "model_transfer_service.proto",
}
